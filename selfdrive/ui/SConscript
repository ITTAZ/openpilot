import json
Import('env', 'qt_env', 'arch', 'common', 'messaging', 'visionipc', 'transformations')

base_libs = [common, messaging, visionipc, transformations,
             'm', 'OpenCL', 'ssl', 'crypto', 'pthread'] + qt_env["LIBS"]

if arch == 'larch64':
  base_libs.append('EGL')

if arch == "Darwin":
  del base_libs[base_libs.index('OpenCL')]

if GetOption('extras'):
  # build installers
  if arch != "Darwin":
    raylib_env = env.Clone()
    raylib_env['LIBPATH'] += [f'#third_party/raylib/{arch}/']
    raylib_env['LINKFLAGS'].append('-Wl,-strip-debug')

    raylib_libs = common + ["raylib"]
    if arch == "larch64":
      raylib_libs += ["GLESv2", "wayland-client", "wayland-egl", "EGL"]
    else:
      raylib_libs += ["GL"]

    release = "release3"
    installers = [
      ("openpilot", release),
      ("openpilot_test", f"{release}-staging"),
      ("openpilot_nightly", "nightly"),
      ("openpilot_internal", "nightly-dev"),
    ]

    cont = raylib_env.Command("installer/continue_openpilot.o", "installer/continue_openpilot.sh",
                              "ld -r -b binary -o $TARGET $SOURCE")
    inter = raylib_env.Command("installer/inter_ttf.o", "installer/inter-ascii.ttf",
                               "ld -r -b binary -o $TARGET $SOURCE")
    for name, branch in installers:
      d = {'BRANCH': f"'\"{branch}\"'"}
      if "internal" in name:
        d['INTERNAL'] = "1"

      obj = raylib_env.Object(f"installer/installers/installer_{name}.o", ["installer/installer.cc"], CPPDEFINES=d)
      f = raylib_env.Program(f"installer/installers/installer_{name}", [obj, cont, inter], LIBS=raylib_libs)
      # keep installers small
      assert f[0].get_size() < 1900*1e3, f[0].get_size()
